import Head from 'next/head'
// import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '../styles/Home.module.css'
import { Box, Button, HStack, Image, Input, InputGroup, InputLeftAddon, InputRightAddon, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalOverlay, SimpleGrid, Stack, Text, useDisclosure } from '@chakra-ui/react'
import { AiOutlineSearch } from 'react-icons/ai';
import { useState } from 'react'
import {useAppDispatch, useAppSelector} from 'services/redux/hooks'
import { PhotoState, reducerPhoto } from 'services/redux/reducers/photos'
import { getSearchPhotos } from 'services/helpers/photosHandler'
import FlatList from 'flatlist-react';
import { IListPhotos } from 'services/models/photo_list_model'
import { StaggeredGrid, StaggeredGridItem } from 'react-staggered-grid'
import Link from 'next/link';

const inter = Inter({ subsets: ['latin'] })

interface listProps {
  results: Array<any>;
  total: number;
  total_pages: number;
}

export default function Home() {
  const dispatch = useAppDispatch();
  const photos = useAppSelector(state => state.photos);

  const { isOpen, onOpen, onClose } = useDisclosure()

  const [searchText, setSearchText] = useState('');

  const [currentPage, setCurrentPage] = useState(1);

  const [isLoading, setIsLoading] = useState(false);

  const [list, setList] = useState<listProps>({
    results: [],
    total: 0,
    total_pages: 0,
  });

  const getPhotos = async (page: number) => {
    setIsLoading(true);
    try {
      const response = await getSearchPhotos(searchText, page);
      if (page === 1) {
        setList({
          results: response.results,
          total: response.total,
          total_pages: response.total_pages,
        });
      } else {
        setList({
          results: [...list.results, ...response.results],
          total: response.total,
          total_pages: response.total_pages,
        });
      }
      console.log('response', response);
      setIsLoading(false);
      return response;
    } catch (error) {
      console.log(error);
      setIsLoading(false);
      return error;
    }
  };

  const [isModalVisible, setIsModalVisible] = useState(false);

  const [items, setItems] = useState<IListPhotos>();

  const onItemClick = (item: IListPhotos) => {
    console.log(item);
    setIsModalVisible(true);
    setItems(item);
    onOpen();

    dispatch(
      reducerPhoto({

        id: item.id,
        alt_description: item.alt_description,
        description: item.description,
        likes: item.likes,
        urls: item?.urls,
        user: {
          name: item?.user?.name,
          profile_image: item?.user?.profile_image?.medium,
          username: item?.user?.username,
        },
      }),
    );
  };

  const renderItem = (item: IListPhotos) =>
    (
    <Box onClick={() => onItemClick(item)} key={item.id} borderRadius={20}>
      <Image
        src={item?.urls?.thumb}
        alt="image.png"
        width="100%"
        height="100%"
        objectFit="cover"
        borderRadius={20}
        _hover={{ boxShadow: 'rgba(0, 0, 0, 0.35) 0px 5px 15px', cursor: 'pointer' }} />
      </Box>
    );


  const renderLoader = () => {
    return isLoading ? (
      <Box>
        <Text size="large" color="grey">Loading...</Text>
      </Box>
    ) : null;
  };

  const renderEmpty = () => {
    return (
      <Box>
        <Text fontWeight="bold" color="black">No Images</Text>
      </Box>
    );
  };

  const loadMoreItem = () => {
    if (currentPage < list.total_pages) {
      setCurrentPage(currentPage + 1);
      getPhotos(currentPage + 1);
    }
  };

  console.log('listtst', list);

  return (
    <>
      <Head>
        <title>Kodegiri</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>

        <Stack>
          <Text align="center" fontWeight="bold" fontSize={30}>UNSPLASH</Text>
          <InputGroup>
            <InputLeftAddon>
              <AiOutlineSearch size={30} color="black" />
            </InputLeftAddon>
            <Input
              type='text'
              value={searchText}
              placeholder='Mountain, Car, etc...'
              onChange={(e) => setSearchText(e.target.value)} />
            <InputRightAddon cursor="pointer" onClick={() => getPhotos(1)}>
              <Text fontWeight="bold" color="black">Search</Text>
            </InputRightAddon>
          </InputGroup>
          <Text align="center" color="black">Click `Search` to find the results</Text>

          <SimpleGrid columns={[1, 2, 3]} spacing={10}>
          <FlatList
            list={list?.results}
            keyExtractor={(item: any) => item?.id}
            horizontal={false}
            numColumns={2}
            ListEmptyComponent={renderEmpty}
            ListFooterComponent={renderLoader}
            showsVerticalScrollIndicator={false}
            renderItem={renderItem}
            onEndReached={() => list.results.length > 5 && loadMoreItem()}
            onEndReachedThreshold={0.3}
          />
          </SimpleGrid>

          <Modal isOpen={isOpen} onClose={onClose}>
        <ModalOverlay />
        <ModalContent>

              <ModalBody>
                <Stack>

          <Box key={items?.id} borderRadius={20}>
            <Image
              src={items?.urls?.thumb}
              alt="image.png"
              width="100%"
              height="100%"
              objectFit="cover"
              borderRadius={10}
              />
                  </Box>
                  <HStack justify="space-between">

                  <Text>{items?.user?.name}</Text>
                  <Text>Likes: {items?.likes}</Text>
                  </HStack>
                </Stack>
          </ModalBody>

          <ModalFooter>
            <Button colorScheme='blue' mr={3} onClick={onClose}>
              Close
                </Button>
                <Link href={{query: items , pathname: "/detail"}}>
            <Button variant='ghost' >Detail</Button>
                </Link>
          </ModalFooter>
        </ModalContent>
      </Modal>

          </Stack>
      </main>
    </>
  )
}
