import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '../styles/Home.module.css'
import { Box, Button, Input, InputGroup, InputLeftAddon, InputRightAddon, Stack, Text } from '@chakra-ui/react'
import { AiOutlineSearch } from 'react-icons/ai';
import { useState } from 'react'
import {useAppDispatch, useAppSelector} from 'services/redux/hooks'
import { PhotoState, reducerPhoto } from 'services/redux/reducers/photos'
import { getSearchPhotos } from 'services/helpers/photosHandler'
import FlatList from 'flatlist-react';

const inter = Inter({ subsets: ['latin'] })

interface listProps {
  results: Array<any>;
  total: number;
  total_pages: number;
}

export default function Home() {
  const dispatch = useAppDispatch();
  const photos = useAppSelector(state => state.photos);

  const [searchText, setSearchText] = useState('');

  const [currentPage, setCurrentPage] = useState(1);

  const [isLoading, setIsLoading] = useState(false);

  const [list, setList] = useState<listProps>({
    results: [],
    total: 0,
    total_pages: 0,
  });

  const getPhotos = async (page: number) => {
    setIsLoading(true);
    try {
      const response = await getSearchPhotos(searchText, page);
      if (page === 1) {
        setList({
          results: response.results,
          total: response.total,
          total_pages: response.total_pages,
        });
      } else {
        setList({
          results: [...list.results, ...response.results],
          total: response.total,
          total_pages: response.total_pages,
        });
      }
      console.log('response', response);
      setIsLoading(false);
      return response;
    } catch (error) {
      console.log(error);
      setIsLoading(false);
      return error;
    }
  };

  const [isModalVisible, setIsModalVisible] = useState(false);

  const [items, setItems] = useState<PhotoState>({
    description: '',
    urls: '',
    user: {
      name: '',
      username: '',
      profile_image: '',
    },
    likes: 0,
    alt_description: 'string',
  });

  const onItemClick = (item: any) => {
    console.log(item);
    setIsModalVisible(true);
    setItems(item);

    dispatch(
      reducerPhoto({
        alt_description: item.alt_description,
        description: item.description,
        likes: item.likes,
        urls: item.urls.full,
        user: {
          name: item.user.name,
          profile_image: item.user.profile_image.medium,
          username: item.user.username,
        },
      }),
    );
  };

  const renderItem = ({item}: any) =>
    (
      <Box onClick={() => onItemClick(item)}>
        <Image src={item?.urls?.thumb} height={50} width={50} alt="image.png" />
      </Box>
    );


  const renderLoader = () => {
    return isLoading ? (
      <Box>
        <Text size="large" color="grey">Loading...</Text>
      </Box>
    ) : null;
  };

  const renderEmpty = () => {
    return (
      <Box>
        <Text fontWeight="bold" color="black">No Images</Text>
      </Box>
    );
  };

  const loadMoreItem = () => {
    if (currentPage < list.total_pages) {
      setCurrentPage(currentPage + 1);
      getPhotos(currentPage + 1);
    }
  };

  console.log('listtst', list);

  return (
    <>
      <Head>
        <title>Kodegiri</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>

        <Stack>

          <InputGroup>
            <InputLeftAddon>
              <AiOutlineSearch size={30} color="black" />
            </InputLeftAddon>
            <Input
              type='text'
              value={searchText}
              placeholder='Mountain, Car, etc...'
              onChange={(e) => setSearchText(e.target.value)} />
            <InputRightAddon cursor="pointer" onClick={() => getPhotos(1)}>
              <Text fontWeight="bold" color="black">Search</Text>
            </InputRightAddon>
          </InputGroup>

          <div className={styles.grid}>
          <FlatList
            list={list?.results}
            keyExtractor={(item: any) => item?.id}
            horizontal={false}
            numColumns={2}
            ListEmptyComponent={renderEmpty}
            ListFooterComponent={renderLoader}
            showsVerticalScrollIndicator={false}
            renderItem={renderItem}
            onEndReached={() => list.results.length > 5 && loadMoreItem()}
            onEndReachedThreshold={0.3}
            contentContainerStyle={styles.fg1}
          />
          <a
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Docs <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Find in-depth information about Next.js features and&nbsp;API.
            </p>
          </a>

          <a
            href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Learn <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Learn about Next.js in an interactive course with&nbsp;quizzes!
            </p>
          </a>

          <a
            href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Templates <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Discover and deploy boilerplate example Next.js&nbsp;projects.
            </p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Deploy <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Instantly deploy your Next.js site to a shareable URL
              with&nbsp;Vercel.
            </p>
          </a>
          </div>
          </Stack>
      </main>
    </>
  )
}
